/*
 * Copyright 2016, TeamDev Ltd. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.examples.todolist;

option (type_url_prefix) = "type.spine.examples.todolist";
option java_package = "org.spine3.examples.todolist";
option java_outer_classname = "ValuesProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "spine/change/value_mismatch.proto";
import "spine/annotations.proto";
import "spine/validate.proto";

import "todolist/identifiers.proto";
import "todolist/attributes.proto";

// A wrapper for a task priority.
message TaskPriorityValue {

    // The task priority value.
    TaskPriority priority_value = 1;
}

// **** Data transfer objects ****

// DTO for the task details.
//
// Wrapped by several events to transfer the task data.
//
message TaskDetails {

    // A description of the task.
    string description = 1 [(required) = true];

    // A priority of the task.
    TaskPriority priority = 2 [(required) = true];

    // Whether this task is completed.
    bool completed = 3 [(required) = true];
}

// DTO for the label details.
//
// Wrapped by several events to transfer the label data.
//
message LabelDetails {

    // Label title.
    string title = 1 [(required) = true];

    // Label color.
    LabelColor color = 2;
}

// DTO for the description mismatch.
message DescriptionUpdateFailed {

    TaskCommandFailed update_description_failed = 1;

    // A mismatching description value.
    change.ValueMismatch description_mismatch = 2;
}

// DTO for the priority mismatch.
message PriorityUpdateFailed {

    TaskCommandFailed update_priority_failed = 1;

    // A mismatching priority value.
    change.ValueMismatch priority_mismatch = 2;
}

// DTO for the due date mismatch.
message TaskDueDateUpdateFailed {

    TaskCommandFailed update_due_date_failed = 1;

    // A mismatching due date value.
    change.ValueMismatch due_date_mismatch = 2;
}

// DTO for the label details mismatch.
message LabelDetailsUpdateFailed {

    LabelCommandFailed update_label_details_failed = 1;

    // A mismatching label details value.
    change.ValueMismatch label_details_mismatch = 2;
}

message CreateBasicTaskFailed {

    TaskCommandFailed create_task_failed = 1;
}

message CreateBasicLabelFailed {

    LabelCommandFailed create_label_failed = 1;
}

message AssignLabelToTaskFailed {

    TaskCommandFailed assign_label_failed = 1;

    TaskLabelId label_id = 2;
}

message RemoveLabelFromTaskFailed {

    TaskCommandFailed remove_label_failed = 1;

    TaskLabelId label_id = 2;
}

message ReopenTaskFailed {

    TaskCommandFailed reopen_task_failed = 1;
}

message DeleteTaskFailed {

    TaskCommandFailed delete_task_failed = 1;
}

message RestoreDeletedTaskFailed {

    TaskCommandFailed restore_deleted_task_failed = 1;
}

message CompleteTaskFailed {

    TaskCommandFailed complete_task_failed = 1;
}

message CreateDraftFailed {

    TaskCommandFailed create_draft_failed = 1;
}

message FinalizeDraftFailed {

    TaskCommandFailed finalize_draft_failed = 1;
}

message TaskCommandFailed {

    TaskId task_id = 1;

    string message = 2;
}

message LabelCommandFailed {

    TaskLabelId label_id = 1;

    string message = 2;
}

// DTO for the list of the label IDs.
message LabelIdList {

    // Label identifiers.
    repeated TaskLabelId label_id = 1;
}
