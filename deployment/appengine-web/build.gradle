/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath "gradle.plugin.org.gretty:gretty:$deps.versions.gretty"
        classpath run.gradlePlugins.appengine
        classpath "com.google.guava:guava:$deps.versions.guava"
    }
}

apply plugin: 'war'
apply plugin: 'com.google.cloud.tools.appengine'

apply from: "$projectDir/gradle/appengine.gradle"
apply from: "$projectDir/gradle/datastore-emulator.gradle"

apply from: "$rootDir/version.gradle"

dependencies {
    implementation("com.google.api-client:google-api-client-appengine:$deps.versions.googleApiClient") {
        exclude group: 'javax.servlet', module: 'servlet-api'
    }
    implementation (
        "com.google.appengine:appengine-api-1.0-sdk:$deps.versions.appengineSdk",
        "com.google.api-client:google-api-client:$deps.versions.googleApiClient",

        "io.spine.gcloud:spine-firebase-web:$deps.versions.spineWeb",
        "io.spine.gcloud:spine-datastore:$deps.versions.spineGcloud",
        "io.spine.gcloud:spine-stackdriver-trace:$deps.versions.spineGcloud",

        project(':server')
    )
}

appengine {
    deploy.project = 'spine-dev'
    run {
        port = 8080
        jvmFlags = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005']
        logLevel = "debug"
    }
}

idea.module {
    excludeDirs += file("$projectDir/src/main/webapp/static")

    iml {
        beforeMerged { final module ->
            module.dependencies.clear()
        }
        whenMerged { final module ->
            module.dependencies*.exported = true
        }
    }
}

tasks["appengineRun"].dependsOn startDatastore
tasks["appengineStart"].dependsOn startDatastore
tasks["appengineStop"].dependsOn stopDatastore

configurations.all {
    resolutionStrategy.eachDependency {
        if (it.requested.group == 'javax.servlet') {
            it.useVersion("$deps.versions.appEngineServletApi")
        }
    }
}
