//
// Copyright 2017, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// Apply this script to add ability to publish the needed artifacts.

String repositoryUserName = null
String repositoryUserPassword = null

final String credentialsFileName = 'creadentials.properties'

final Properties properties = new Properties()
final File credentialsFile = project.file(credentialsFileName)
if (credentialsFile.exists()) {
    properties.load(credentialsFile.newDataInputStream())
    repositoryUserName = properties.getProperty("user.name")
    repositoryUserPassword = properties.getProperty("user.password")
}

task checkPublishingCredentials {
    doLast {
        if (repositoryUserName == null || repositoryUserPassword == null) {
            throw new InvalidUserDataException("Please set up valid credentials. " +
                    "Credentials must be set in '${credentialsFileName}' file in the project\'s root.")
        }
        println "Publishing build as ${repositoryUserName}"
    }
}

@SuppressWarnings("GroovyAssignabilityCheck")
// Avoiding `Method call is ambiguous` warning in IDEA.
void dependPublish() {
    final Set<Task> credentialsTasks = getTasksByName("readPublishingCredentials", false)
    project.getTasksByName("publish", false).each { final task ->
        task.dependsOn credentialsTasks
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    from ("$projectDir/build/docs/javadoc")
    classifier "javadoc"
}

apply plugin: 'maven-publish'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar
            artifact javadocJar
        }
    }
}

// As per https://discuss.gradle.org/t/maven-publish-specify-a-repo-as-being-a-snapshot-repo/374/2
final String repositorySuffix = version.endsWith('-SNAPSHOT') ? '-snapshots' : ''

publishing {
    repositories {
        maven {
            url = "http://maven.teamdev.com/repository/spine${repositorySuffix}"
            credentials {
                username = "${repositoryUserName}"
                password = "${repositoryUserPassword}"
            }
        }
    }
}

dependPublish()

