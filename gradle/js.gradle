/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

ext {
    // We do not publish To-Do List modules.
    versionToPublishJs = '-'

    compiledProto = "$projectDir/generated"
}

spine {
    enableJavaScript()
    enableJava {
        codegen {
            protobuf = false
            spine = false
        }
    }
}

project.compileJava.enabled = false
project.compileTestJava.enabled = false

apply from: "$rootDir/gradle/js/build-tasks.gradle"

configurations {
    // Do not generate JS proto definitions for external dependencies.
    protobuf.exclude group: 'io.spine', module: 'spine-base'
    protobuf.exclude group: 'io.spine', module: 'spine-core'
    protobuf.exclude group: 'io.spine', module: 'spine-client'
    protobuf.exclude group: 'com.google.protobuf'
}

dependencies {
    protobuf project(':tasks')
    compile project(':tasks')
}

protobuf {
    generatedFilesBaseDir = compiledProto
    protoc {
        artifact = "com.google.protobuf:protoc:$deps.versions.protobuf"
    }
    generateProtoTasks {
        all().each { final task ->
            task.plugins {
                task.generateDescriptorSet = false
            }
            compileProtoToJs.dependsOn task
        }
    }
}

compileProtoToJs {
    outputs.files compiledProto
}

protoJs {
    generateParsersTask().dependsOn compileProtoToJs
    buildJs.dependsOn generateParsersTask()
}

idea.module {
    sourceDirs += file("$projectDir/src")
    testSourceDirs += file("$projectDir/test")

    iml {
        beforeMerged { final module ->
            module.dependencies.clear()
        }
        whenMerged { final module ->
            module.dependencies*.exported = true
        }
    }
}
