/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.examples.todolist;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.examples.todolist";
option java_package = "io.spine.examples.todolist.tasks.command";
option java_outer_classname = "CommandsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "spine/change/change.proto";

import "todolist/identifiers.proto";
import "todolist/changes.proto";
import "todolist/values.proto";

// An attempt to create a task in a "Quick" mode.
//
// "Quick" task creation mode allows users to enter the description only.
// The rest of the fields are set according to the default values:
//
//      * priority = NORMAL;
//      * label = [no label];
//      * due_date = [no due date].
//
// In case of a successful command propagation, the domain model is appended with a new task.
// The creation date for the task is set according to the local server time and time zone.
//
message CreateBasicTask {

    // An identifier of the target task.
    TaskId id = 1;

    // A description for the task created.
    TaskDescription description = 2 [(validate) = true];
}

// Update a description of an existing task.
//
// Applicable to both drafts and finalized tasks.
// Cannot be applied to the deleted tasks.
// Cannot be applied to the completed tasks.
//
message UpdateTaskDescription {

    // An identifier of the target task.
    TaskId id = 1;

    // The change of the task description.
    DescriptionChange description_change = 2 [(validate) = true];
}

// Update a due date of an existing task.
//
// Applicable to both drafts and finalized tasks.
// Cannot be applied to the deleted tasks.
// Cannot be applied to the completed tasks.
//
message UpdateTaskDueDate {

    // An identifier of the target task.
    TaskId id = 1;

    // The due date change.
    // Contains the previous due date and the due date to set for the target task.
    //
    // The updated value cannot be in the past.
    change.TimestampChange due_date_change = 2 [(required) = true];
}

// Update a priority of an existing task.
//
// Applicable to both drafts and finalized tasks.
// Cannot be applied to the deleted tasks.
// Cannot be applied to the completed tasks.
//
message UpdateTaskPriority {

    // An identifier of the target task.
    TaskId id = 1;

    // The priority change.
    // Contains the previous priority and the priority to set for the target task.
    PriorityChange priority_change = 2 [(required) = true];
}

// Assign a label to a task.
//
// Applicable to both drafts and finalized tasks.
// Cannot be applied to the deleted tasks.
// Cannot be applied to the completed tasks.
//
// The command shouldn't affect the task in case this label is already assigned to it.
//
message AssignLabelToTask {

    // An identifier of the target task.
    TaskId id = 1;

    // An identifier of the label to assign to the target task.
    LabelId label_id = 2;
}

// Remove the previously assigned label from a task.
//
// Applicable to both drafts and finalized tasks.
// Cannot be applied to the deleted tasks.
// Cannot be applied to the completed tasks.
//
// The command should not affect the task in case there is no such label assigned.
//
message RemoveLabelFromTask {

    // An identifier of the target task.
    TaskId id = 1;

    // An identifier of the label to assign to the target task.
    LabelId label_id = 2;
}

// Create a draft.
//
// Cannot be applied to the deleted tasks.
// Cannot be applied to the completed tasks.
//
message CreateDraft {

    // An identifier of the target task.
    TaskId id = 1;
}

// Finalize a task, moving it from the draft state into the actual state.
//
// Applicable to the draft tasks only.
// Cannot be applied to the deleted drafts.
//
message FinalizeDraft {

    // An identifier of the target task.
    TaskId id = 1;
}

// Complete a task.
//
// Cannot be applied to the deleted tasks.
// Cannot be applied to the tasks in a draft state.
//
message CompleteTask {

    // An identifier of the target task.
    TaskId id = 1;
}

// Complete a task.
//
// Applicable to the completed tasks only.
//
message ReopenTask {

    // An identifier of the target task.
    TaskId id = 1;
}

// Delete a task.
//
// Applicable to non-completed tasks only.
// Cannot be applied to the deleted tasks as well.
//
message DeleteTask {

    // An identifier of the target task.
    TaskId id = 1;
}

// Restore a deleted task.
//
// Applicable to deleted tasks only.
//
message RestoreDeletedTask {

    // An identifier of the target task.
    TaskId id = 1;
}

// An attempt to create a label in a "Quick" mode.
//
// "Quick" label creation mode allows users to enter the label title only.
// The created label will have the rest of the fields set according to defaults:
//
//      * color = GRAY.
//
message CreateBasicLabel {

    // An identifier of the target label.
    LabelId label_id = 1;

    // A title for the label.
    string label_title = 2 [(required) = true];
}

// Update the details of a label.
//
message UpdateLabelDetails {

    // An identifier of the target label.
    LabelId id = 1;

    // The label details change.
    // Contains the previous label details and the label details to set for the target label.
    LabelDetailsChange label_details_change = 2 [(required) = true];
}

// Commands to the task creation wizard
// ------------------------------------

// Start the task creation process.
//
// The process involves creating a draft and assigning all the task fields to it.
//
// The process itself has an identifier, so the client should work with the ID of the process
// rather than the ID of the task itself. The process ID is specified in this command together with
// the task ID.
//
// This command causes an empty draft with the given ID to be created.
//
message StartTaskCreation {

    // The ID of the task creation process.
    TaskCreationId id = 1 [(required) = true, (validate) = true];

    // The ID of the task to create.
    TaskId task_id = 2 [(required) = true, (validate) = true];
}

// Update the basic details of the created task.
//
message UpdateTaskDetails {

    // The ID of the task creation process.
    TaskCreationId id = 1 [(required) = true, (validate) = true];

    // The task description change.
    //
    // This field is required for the initial task definition but becomes optional for the
    // further updates.
    //
    DescriptionChange description_change = 2 [(validate) = true];

    // The priority change for the task.
    //
    // This field is optional. If the task priority is not set during the creation process, the
    // default `NORMAL` is used.
    //
    PriorityChange priority_change = 3;

    // The due date change.
    //
    // This fiend is optional. If the due date is not set, the task won't have any.
    //
    change.TimestampChange due_date_change = 4;
}

// Add labels to the task being created.
//
// It is possible both to specify the existing labels and assign them to the task and to create new
// labels and assign them to the task at once.
//
// The existing labels are specified by their IDs.
//
// The new labels are specified by their data (label details).
//
// If neither new nor existing labels are specified, the `CannotAddLabels` rejection will be
// thrown.
//
message AddLabels {

    // The ID of the task creation process.
    TaskCreationId id = 1 [(required) = true, (validate) = true];

    // The IDs of the existing labels to assign to the task.
    repeated LabelId existing_labels = 2 [(validate) = true];

    // The details of the new labels to create and assign to the task.
    repeated LabelDetails new_labels = 3 [(validate) = true];
}

// Skip adding labels to the created task and proceed to other creation stages.
//
// Use this command to skip the `LABEL_ASSIGNMENT` stage of task creation as using `AddLabels` with
// empty arguments is not allowed.
//
message SkipLabels {

    // The ID of the task creation process.
    TaskCreationId id = 1 [(required) = true, (validate) = true];
}

// Complete the task creation process.
//
// The task being created is now finalized.
//
// No other commands should be issued to this process after this one.
//
message CompleteTaskCreation {

    // The ID of the task creation process.
    TaskCreationId id = 1 [(required) = true, (validate) = true];
}

// Cancel the task creation process.
//
// The task persists as a draft. The client may finalize or delete it manually.
//
// No other commands should be issued to this process after this one.
//
message CancelTaskCreation {

    // The ID of the task creation process.
    TaskCreationId id = 1 [(required) = true, (validate) = true];
}
