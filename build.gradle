/*
 * Copyright 2018, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript {
    apply from: "$rootDir/config/gradle/dependencies.gradle"
    apply from: 'ext.gradle'

    repositories {
        jcenter()
        google()
        mavenCentral()
        mavenLocal()
        maven { url = repos.gradlePlugins }
        maven { url = repos.spine }
        maven { url = repos.spineSnapshots }
    }

    dependencies {
        classpath deps.build.guava
        classpath(deps.build.gradlePlugins.protobuf) {
            // exclude an old Guava version
            exclude group: 'com.google.guava'
        }
        classpath deps.build.gradlePlugins.protobuf
        classpath 'org.akhikhl.gretty:gretty:+'
        classpath "org.junit.platform:junit-platform-gradle-plugin:${jUnitPlatformVersion}"
        classpath "io.spine.tools:spine-model-compiler:${spineBaseVersion}"
        classpath "io.spine.tools:spine-model-verifier:${spineVersion}"
    }

    // The below suppressions `GroovyAssignabilityCheck` is a workaround for the IDEA bug.
    // See: https://youtrack.jetbrains.com/issue/IDEA-141744
    //noinspection GroovyAssignabilityCheck
    configurations.all {
        //noinspection GroovyAssignabilityCheck
        resolutionStrategy {
            // don't cache changing modules at all
            cacheChangingModulesFor 0, 'seconds'
        }
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.0'
}

// Apply configure-less Gretty multiple web-app setup.
// Do not move this declaration into `allprojects`. It doesn't work for Gretty.
//
// To run the web farm use:
//     gradle farmRun
//
// For more information see: http://akhikhl.github.io/gretty-doc/Multiple-web-apps-configureless-setup.html
// To run only selected farms see: http://akhikhl.github.io/gretty-doc/Configuring-default-farm.html
apply plugin: 'org.akhikhl.gretty'

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

allprojects {
    apply plugin: 'java' /* The `java` plugin is required at this level for Gradle Protobuf plugin.
                            See https://github.com/google/protobuf-gradle-plugin#adding-the-plugin-to-your-project */
    apply plugin: 'jacoco'
    apply plugin: 'idea'

    group = 'io.spine.examples.todolist'       // Generated output GroupId
    version = appVersion  // Version in generated output. This is the version of the code.
    // For the deployment version see `project.ext.getDeploymentVersion`.

    repositories {
        jcenter()
        google()
        mavenCentral()
        mavenLocal()
        maven { url = repos.gradlePlugins }
        maven { url = repos.spine }
        maven { url = repos.spineSnapshots }
    }
}

// Suppress building the root project.
rootProject.jar.enabled = false

final boolean isTravis = System.env.TRAVIS == 'true'

subprojects {
    project.ext {
        sourcesRootDir = "${projectDir}/src"
        generatedRootDir = "${projectDir}/generated"

        generatedJavaDir = "${generatedRootDir}/main/java"
        generatedTestJavaDir = "${generatedRootDir}/test/java"

        generatedGrpcDir = "${generatedRootDir}/main/grpc"
        generatedTestGrpcDir = "${generatedRootDir}/test/grpc"

        generatedSpineDir = "${generatedRootDir}/main/spine"
        generatedTestSpineDir = "${generatedRootDir}/test/spine"

        protobufPlugin = "${rootDir}/scripts/protobuf.gradle"
    }

    apply plugin: 'java' /* The `java` plugin is required at this level for Gradle Protobuf plugin.
                            See https://github.com/google/protobuf-gradle-plugin#adding-the-plugin-to-your-project */
    apply plugin: 'com.google.protobuf'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'io.spine.tools.spine-model-compiler'
    apply plugin: 'io.spine.tools.spine-model-verifier'

//    compileJava {
//        // The configuration for `spine-model-verifier`.
//        options.compilerArgs += ["-processor", "io.spine.model.assemble.AssignLookup",
//                                 "-AspineDirRoot=${rootDir}"]
//    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        implementation deps.build.slf4j

        // todo try make it testImplementation
        implementation deps.test.slf4j

        implementation deps.build.jsr305Annotations

        implementation deps.build.guava

        implementation "com.google.code.gson:gson:$gsonVersion"

        implementation deps.build.protobuf

        implementation "io.spine:spine-base:$spineBaseVersion"

        // todo try make it protobuf
        implementation "io.spine:spine-client:$spineVersion"

        annotationProcessor "io.spine.tools:spine-model-assembler:$spineVersion"

        testImplementation deps.test.hamcrest

        testImplementation "io.spine:spine-testlib:${spineBaseVersion}"
        testImplementation "io.spine:spine-testutil-core:${spineVersion}"
        testImplementation "io.spine:spine-testutil-client:${spineVersion}"

        testImplementation "io.spine:spine-testutil-server:${spineVersion}"

        testImplementation deps.test.junit5Api
        testImplementation deps.test.junit5Runner
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    sourceSets {
        main {
            java.srcDirs = [generatedJavaDir, generatedSpineDir, "${sourcesRootDir}/main/java"]
            resources.srcDirs = ["${generatedRootDir}/main/resources", "${sourcesRootDir}/main/resources"]
        }
        test {
            java.srcDirs = [generatedTestJavaDir, generatedTestSpineDir, "${sourcesRootDir}/test/java"]
            resources.srcDirs = ["${generatedRootDir}/test/resources", "${sourcesRootDir}/test/resources"]
        }
    }

    junitPlatform {
        platformVersion "${jUnitPlatformVersion}"

        logManager 'java.util.logging.LogManager'

        selectors {
            directory "${sourcesRootDir}/test/java"
            packages 'io.spine.examples.todolist', 'io.spine.cli', 'io.spine.server'
        }

        filters {
            includeClassNamePatterns '.*Test'
        }
    }

    idea {
        module {
            sourceDirs += file(generatedJavaDir);
            sourceDirs += file(generatedGrpcDir);
            sourceDirs += file(generatedSpineDir);

            testSourceDirs += file(generatedTestJavaDir)
            testSourceDirs += file(generatedTestGrpcDir)
        }
    }

    idea.module.iml {
        beforeMerged { module ->
            module.dependencies.clear()
        }
        whenMerged { module ->
            module.dependencies*.exported = true
        }
    }

    // This is a workaround to make JUnit 5 work with Jacoco library.
    // There is an open issue here:
    // <link>https://discuss.gradle.org/t/jacocotestreport-task-fails-if-jacoco-plugin-is-applied-in-afterevaluate/835</link>
    // todo:13-12-16:illia.shepilov: revisit the workaround once the issue is resolved.
    project.afterEvaluate {
        def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')

        // configure jacoco to analyze the junitPlatformTest task
        jacoco {
            // this tool version is known to be compatible with JUnit 5.
            toolVersion = "0.7.6.201602180812"
            applyTo junitPlatformTestTask
        }

        codeCoverageReport.dependsOn {
            subprojects*.test
        }
    }

}

idea.project.ipr {
    beforeMerged { final project ->
        project.modulePaths.clear()
    }
    withXml { final provider ->
        provider.node.component
                .find { it.@name == 'VcsDirectoryMappings' }
                .mapping.@vcs = 'Git'
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.destination = "${buildDir}/reports/jacoco/report.xml"
        html.enabled = false
        csv.enabled = false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

// This Travis configuration is copied from Protobuf Gradle Plugin build.
// See: https://github.com/google/protobuf-gradle-plugin/blob/master/build.gradle
if (isTravis) {
    // To limit the memory usage when running in Travis.
    // Travis tend to kill tasks that use too much memory.
    allprojects {
        tasks.withType(GroovyCompile) {
            groovyOptions.fork = false
        }
        tasks.withType(Test) {
            // containers (currently) have 2 dedicated cores and 4GB of memory
            maxParallelForks = 2
            minHeapSize = '128m'
        }
    }
    // Travis kills the test if it has seen no output for 10 minutes, so we need to produce output.
    test {
        testLogging {
            showStandardStreams = true
        }
    }
}
