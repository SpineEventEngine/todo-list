/*
 * Copyright 2018, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript {final scriptHandler ->
    apply from: "$rootDir/config/gradle/dependencies.gradle"
    apply from: 'version.gradle'

    defaultRepositories(scriptHandler)

    dependencies {
        classpath deps.build.guava
        classpath(deps.build.gradlePlugins.protobuf) {
            // exclude an old Guava version
            exclude group: 'com.google.guava'
        }
        classpath deps.build.gradlePlugins.protobuf
        classpath deps.build.gradlePlugins.errorProne
        classpath ("gradle.plugin.org.gretty:gretty:+") {
            exclude group: 'commons-logging'
        }
        classpath "io.spine.tools:spine-model-compiler:$spineBaseVersion"
        classpath "io.spine.tools:spine-model-verifier:$spineVersion"
        classpath "io.spine.tools:spine-proto-js-plugin:$spineBaseVersion"
    }
    forceConfiguration(scriptHandler)
}

plugins {
    id 'com.gradle.build-scan' version '2.1'
}

// Apply configure-less Gretty multiple web-app setup.
// Do not move this declaration into `allprojects`. It doesn't work for Gretty.
//
// To run the web farm use:
//     gradle farmRun
//
// For more information see: http://akhikhl.github.io/gretty-doc/Multiple-web-apps-configureless-setup.html
// To run only selected farms see: http://akhikhl.github.io/gretty-doc/Configuring-default-farm.html
apply plugin: 'org.gretty'

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

allprojects {
    apply plugin: 'java' /* The `java` plugin is required at this level for Gradle Protobuf plugin.
                            See https://github.com/google/protobuf-gradle-plugin#adding-the-plugin-to-your-project */
    apply plugin: 'jacoco'
    apply plugin: 'idea'

    group = 'io.spine.examples.todolist'       // Generated output GroupId
    version = appVersion  // Version in generated output. This is the version of the code.
    // For the deployment version see `project.ext.getDeploymentVersion`.

    defaultRepositories(project)
}

// Suppress building the root project.
rootProject.jar.enabled = false

final boolean isTravis = System.env.TRAVIS == 'true'

subprojects {
    project.ext {
        sourcesRootDir = "${projectDir}/src"
        generatedRootDir = "${projectDir}/generated"

        generatedJavaDir = "${generatedRootDir}/main/java"
        generatedTestJavaDir = "${generatedRootDir}/test/java"

        generatedGrpcDir = "${generatedRootDir}/main/grpc"
        generatedTestGrpcDir = "${generatedRootDir}/test/grpc"

        generatedSpineDir = "${generatedRootDir}/main/spine"
        generatedTestSpineDir = "${generatedRootDir}/test/spine"

        protobufPlugin = "${rootDir}/scripts/protobuf.gradle"
    }

    apply plugin: 'java' /* The `java` plugin is required at this level for Gradle Protobuf plugin.
                            See https://github.com/google/protobuf-gradle-plugin#adding-the-plugin-to-your-project */
    apply plugin: 'com.google.protobuf'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'pmd'
    apply plugin: 'io.spine.tools.spine-model-compiler'
    apply plugin: 'io.spine.tools.spine-model-verifier'

    apply from: deps.scripts.javacArgs

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    compileJava {
        options.compilerArgs += ["-processor", "io.spine.model.assemble.AssignLookup", "-AspineDirRoot=${rootDir}"]
    }

    dependencies {
        compile deps.build.slf4j

        errorprone deps.build.errorProneCore
        errorproneJavac deps.build.errorProneJavac

        implementation deps.test.slf4j
        implementation deps.build.jsr305Annotations
        implementation deps.build.guava
        implementation "com.google.code.gson:gson:$gsonVersion"
        implementation deps.build.protobuf
        implementation "io.spine:spine-base:$spineBaseVersion"
        implementation "io.spine:spine-client:$spineVersion"

        annotationProcessor "io.spine.tools:spine-model-assembler:$spineVersion"

        testImplementation deps.test.junit5Api
        testImplementation deps.test.junit5Runner
        testImplementation deps.test.hamcrest
        testImplementation "io.spine:spine-testlib:${spineBaseVersion}"
        testImplementation "io.spine:spine-testutil-core:${spineVersion}"
        testImplementation "io.spine:spine-testutil-client:${spineVersion}"
        testImplementation "io.spine:spine-testutil-server:${spineVersion}"
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    build.dependsOn jacocoTestReport

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    sourceSets {
        main {
            java.srcDirs = [generatedJavaDir, generatedSpineDir, "${sourcesRootDir}/main/java"]
            resources.srcDirs = ["${generatedRootDir}/main/resources", "${sourcesRootDir}/main/resources"]
        }
        test {
            java.srcDirs = [generatedTestJavaDir, generatedTestSpineDir, "${sourcesRootDir}/test/java"]
            resources.srcDirs = ["${generatedRootDir}/test/resources", "${sourcesRootDir}/test/resources"]
        }
    }

    idea {
        module {
            sourceDirs += file(generatedJavaDir);
            sourceDirs += file(generatedGrpcDir);
            sourceDirs += file(generatedSpineDir);

            testSourceDirs += file(generatedTestJavaDir)
            testSourceDirs += file(generatedTestGrpcDir)
        }
    }

    idea.module.iml {
        beforeMerged { module ->
            module.dependencies.clear()
        }
        whenMerged { module ->
            module.dependencies*.exported = true
        }
    }

    apply from: deps.scripts.pmd
}

idea.project.ipr {
    beforeMerged { final project ->
        project.modulePaths.clear()
    }
    withXml { final provider ->
        provider.node.component
                .find { it.@name == 'VcsDirectoryMappings' }
                .mapping.@vcs = 'Git'
    }
}

// This Travis configuration is copied from Protobuf Gradle Plugin build.
// See: https://github.com/google/protobuf-gradle-plugin/blob/master/build.gradle
if (isTravis) {
    // To limit the memory usage when running in Travis.
    // Travis tend to kill tasks that use too much memory.
    allprojects {
        tasks.withType(GroovyCompile) {
            groovyOptions.fork = false
        }
        tasks.withType(Test) {
            // containers (currently) have 2 dedicated cores and 4GB of memory
            maxParallelForks = 2
            minHeapSize = '128m'
        }
    }
    // Travis kills the test if it has seen no output for 10 minutes, so we need to produce output.
    test {
        testLogging {
            showStandardStreams = true
        }
    }
}
